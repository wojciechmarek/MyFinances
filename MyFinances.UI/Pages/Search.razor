@page "/search"
@using MyFinances.Common.Models.Stock
@using MyFinances.Database.Command
@using MyFinances.Stock.Adapter
@using MyFinances.Common.Command.Commands
@using MyFinances.Database.Command.Commands
@using MyFinances.Database.Facades
@using Microsoft.AspNetCore.Http
@inject IStockAdapter StockAdapter
@inject IProfileFcd ProfileFacade
@inject ProfileServicesInvoker ProfileServicesInvoker
@inject ProfileServicesReceiver ProfileServicesReceiver
@inject IHttpContextAccessor HttpContextAccessor

<h1>Search</h1>

<div class="mat-elevation-z5 p-3">
    <div class="d-flex">
        <div class="flex-fill m-1">
            <MatTextField @bind-Value="@SearchValue" Label="Stock symbol" FullWidth="true"></MatTextField>
        </div>
        <div class="m-1">
            <MatButton Raised="true" Class="m-3" OnClick="SearchStock">Search</MatButton>
        </div>
    </div>
</div>
<div class="mat-elevation-z5 mt-5 p-3">
    @if ((stocks.Count) > 0)
    {
        <h4 class="mt-2">Results:</h4>
        <MatTable Items="@stocks" class="mat-elevation-z5">
            <MatTableHeader>
                <th>Symbol</th>
                <th style="width: 80%;">Name</th>
                <th style="width: 10%;">Last price</th>
                <th>Details</th>
                <th>Favorite</th>
            </MatTableHeader>
            <MatTableRow>
                <td>@context.Symbol</td>
                <td>@context.Name</td>
                <td>@String.Format("{0:f2} zł", @context.LastPrice)</td>
                <td><MatButton Raised="true" Class="m-3" OnClick="_ => ShowStockDetails(context.Symbol)">Show</MatButton></td>
                <td>
                    @if (context.IsFavorite)
                        {
                        <MatButton Icon="favorite" OnClick="_ => FavoriteClicked(context)"></MatButton>
                        }
                        else
                        {
                        <MatButton Icon="favorite_border" OnClick="_ => FavoriteClicked(context)"></MatButton>
                        }
                </td>
            </MatTableRow>
        </MatTable>
    }
    else
    {
        <h4>No results yet</h4>
    }
</div>
<AssetDetails IsOpen=@infoDialogIsOpen OnOkClickDetails=@OnOkClickDetails Symbol=@stockSymbol></AssetDetails>
<LogInWarning IsOpen=@loginWarning OnOkClick="@OkClickedInWarning"></LogInWarning>

@code {
    bool dialogIsOpen = false;
    bool loginWarning = false;
    bool isLoggedIn = false;
    bool infoDialogIsOpen = false;
    string stockSymbol = string.Empty;

    private string SearchValue { get; set; }
    private IList<Stock> stocks { get; set; }

    protected override void OnInitialized()
    {
        stocks = StockAdapter.GetStocks().ToList();
        isLoggedIn = HttpContextAccessor.HttpContext.User.Identity.IsAuthenticated;
        UpdateStockFavoritiesList();
    }

    private void SearchStock()
    {
        stocks = StockAdapter.SearchStock(SearchValue);
        UpdateStockFavoritiesList();
    }

    private void FavoriteClicked(Stock stock)
    {
        if (!isLoggedIn)
        {
            loginWarning = true;
        }
        else
        {
            if (stock.IsFavorite)
            {
                ProfileServicesInvoker.SetCommand(new RemoveFromFavority(ProfileServicesReceiver, stock.Symbol));
                ProfileServicesInvoker.Execute();
            }
            else
            {
                ProfileServicesInvoker.SetCommand(new AddToFavorite(ProfileServicesReceiver, stock.Symbol));
                ProfileServicesInvoker.Execute();
            }

            UpdateStockFavoritiesList();
        }
    }

    private void ShowDetails()
    {
        dialogIsOpen = true;
    }

    private void ShowStockDetails(string symbol)
    {
        stockSymbol = symbol;
        infoDialogIsOpen = true;
    }

    private void OnOkClickDetails()
    {
        infoDialogIsOpen = false;
    }

    private void OkClickedInWarning()
    {
        loginWarning = false;
    }

    private void UpdateStockFavoritiesList()
    {
        if (isLoggedIn)
        {
            var userFavorities = ProfileFacade.GetFavoritiesAssets();

            foreach (var stock in stocks)
            {
                var isFavByUser = userFavorities.Contains(stock.Symbol);
                stock.IsFavorite = isFavByUser;
            }
        }

    }
}
