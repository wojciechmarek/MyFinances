@page "/favlist"

@using MyFinances.UI.Data
@using MyFinances.Common.Models.Stock
@using MyFinances.UI.Shared
@inject WeatherForecastService ForecastService

<h1>Your favorite stocks list</h1>

<div class="mat-elevation-z5 mt-5 p-3">
    @if ((stocks.Count) > 0)
    {
        <h4 class="mt-2">Results:</h4>
        <MatTable Items="@stocks" class="mat-elevation-z5">
            <MatTableHeader>
                <th>Symbol</th>
                <th style="width: 90%;">Name</th>
                <th>Last price</th>
                <th>Details</th>
                <th>Favorite</th>
            </MatTableHeader>
            <MatTableRow>
                <td>@context.Symbol</td>
                <td>@context.Name</td>
                <td>@String.Format("${0:f2}", @context.LastPrice)</td>
                <td><MatButton Raised="true" Class="m-3" OnClick="() => dialogIsOpen = true">Show</MatButton></td>
                <td><MatButton Raised="true" Class="m-3" OnClick="() => RemoveFromFav(context)">Remove</MatButton></td>
            </MatTableRow>
        </MatTable>
    }
    else
    {
        <h4>...is already empty.</h4>
    }
</div>
<AssetDetails IsOpen=@dialogIsOpen></AssetDetails>


@code {

    bool dialogIsOpen = false;

    private List<Stock> stocks { get; set; } = new List<Stock>()
    {
        new Stock() {IsFavorite = false, Name = "Google", Symbol = "GOOG", LastPrice = 23.43m},
        new Stock() {IsFavorite = false, Name = "Allpe", Symbol = "GOOG", LastPrice = 23.43m},
        new Stock() {IsFavorite = false, Name = "Orzech", Symbol = "GOOG", LastPrice = 23.43m},
        new Stock() {IsFavorite = false, Name = "Koltex", Symbol = "GOOG", LastPrice = 23.43m},
        new Stock() {IsFavorite = false, Name = "Spacex", Symbol = "GOOG", LastPrice = 23.43m},
        new Stock() {IsFavorite = false, Name = "Fabrity", Symbol = "GOOG", LastPrice = 23.43m},
        new Stock() {IsFavorite = false, Name = "K2", Symbol = "GOOG", LastPrice = 23.43m},
        new Stock() {IsFavorite = false, Name = "Ideo", Symbol = "GOOG", LastPrice = 23.43m},
    };

    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }

    private void RemoveFromFav(Stock stock)
    {
        stocks.Remove(stock);
    }

}
