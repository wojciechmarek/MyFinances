@page "/favlist"
@attribute [Authorize]
@inject IStockAdapter StockAdapter
@inject IProfileFcd ProfileFacade
@inject ProfileServicesInvoker ProfileServicesInvoker
@inject ProfileServicesReceiver ProfileServicesReceiver

@using MyFinances.Common.Models.Stock
@using MyFinances.Common.Models.UI
@using MyFinances.Database.Command
@using MyFinances.Database.Command.Commands
@using MyFinances.Database.Facades
@using MyFinances.Stock.Adapter
@using MyFinances.UI.Shared
@using MyFinances.Common.Command.Commands

<h1>Your favorite stocks list</h1>

<div class="mat-elevation-z5 mt-5 p-3">
    @if ((stocks.Count) > 0)
    {
        <h4 class="mt-2">Results:</h4>
        <MatTable Items="@stocks" class="mat-elevation-z5">
            <MatTableHeader>
                <th>Symbol</th>
                <th style="width: 90%;">Name</th>
                <th>Last price</th>
                <th>Details</th>
                <th>Favorite</th>
            </MatTableHeader>
            <MatTableRow>
                <td>@context.Symbol</td>
                <td>@context.Name</td>
                <td>@String.Format("${0:f2}", @context.LastPrice)</td>
                <td><MatButton Raised="true" Class="m-3" OnClick="() => ShowStockDetails(context.Symbol)">Show</MatButton></td>
                <td><MatButton Raised="true" Class="m-3" OnClick="() => RemoveFromFav(context)">Remove</MatButton></td>
            </MatTableRow>
        </MatTable>
    }
    else
    {
        <h4>...is already empty.</h4>
    }
</div>
<AssetDetails IsOpen=@infoDialogIsOpen OnOkClickDetails=@OnOkClickDetails Symbol=@stockSymbol></AssetDetails>


@code {

    bool infoDialogIsOpen = false;
    string stockSymbol = string.Empty;

    private List<Stock> stocks { get; set; }

    protected override void OnInitialized()
    {
        UpdateStockList();
    }

    private void UpdateStockList()
    {
        stocks = StockAdapter.GetStocks().ToList();

        var userFavorities = ProfileFacade.GetFavoritiesAssets();

        foreach (var stock in stocks)
        {
            var isFavByUser = userFavorities.Contains(stock.Symbol);
            stock.IsFavorite = isFavByUser;
        }

        stocks = stocks.Where(x => x.IsFavorite == true).ToList();
    }

    private void RemoveFromFav(Stock stock)
    {
        ProfileServicesInvoker.SetCommand(new RemoveFromFavority(ProfileServicesReceiver, stock.Symbol));
        ProfileServicesInvoker.Execute();

        UpdateStockList();
    }

    private void ShowStockDetails(string symbol)
    {
        stockSymbol = symbol;
        infoDialogIsOpen = true;
    }

    private void OnOkClickDetails()
    {
        infoDialogIsOpen = false;
    }

}
