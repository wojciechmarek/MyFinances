@using MyFinances.UI.Data
@using MyFinances.Common.Models.UI
@using MyFinances.Common.Models.Stock
@using MyFinances.Common.State
@using MyFinances.Stock.Adapter
@using MyFinances.UI.Data.HistoryIntervals
@using IdentityServer4.Extensions
@inject StockHistoryContext StockHistoryContext
@inject IStockAdapter StockAdapter

<div>
    <MatDialog @bind-IsOpen="@IsOpen">
        <MatDialogTitle>@Symbol</MatDialogTitle>
        <MatDialogContent Style="width: 560px; height: 260px;">
            <div>
                <MatButton Outlined="true" OnClick='_ => ShowPrices("daily")'>Daily prices</MatButton>
                <MatButton Outlined="true" OnClick='_ => ShowPrices("hourly")'>Hourly prices</MatButton>
            </div>
            <h5>@stockHistory.Name</h5>
            <MatDivider></MatDivider>
            <div>
                @foreach (var price in prices)
                {
                    <p>@price.Time.ToLocalTime(): <b>@String.Format("{0:f2} zł", price.Price)</b></p>
                }
            </div>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="OnOkClickDetails">OK</MatButton>
        </MatDialogActions>
    </MatDialog>
</div>

@code {
    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public string Symbol { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnOkClickDetails { get; set; }

    string intervalName = string.Empty;
    IList<UIStock> prices = new List<UIStock>();
    HourInterval hourInterval;
    DayInterval dayInterval;
    StockHistory stockHistory;

    protected override void OnInitialized()
    {
        if (Symbol.IsNullOrEmpty()) Symbol = "CCC";

        hourInterval = new HourInterval();
        hourInterval.SetContext(StockAdapter);
        dayInterval = new DayInterval();
        dayInterval.SetContext(StockAdapter);

        DailyPrices();
    }

    protected override void OnParametersSet()
    {
        DailyPrices();
        base.OnParametersSet();
    }

    private void ShowPrices(string interval)
    {
        switch (interval)
        {
            case "daily":
                DailyPrices();
                break;

            case "hourly":
                HourlyPrices();
                break;
        }
    }

    private void HourlyPrices()
    {
        intervalName = "Hourly interval";
        StockHistoryContext.SetStockHistoryContext(hourInterval);
        stockHistory = StockHistoryContext.GetStockHistory(Symbol);

        var stock = stockHistory.Prices;

        prices.Clear();
        prices.Add(new UIStock(DateTime.Now, stock[0]));
        prices.Add(new UIStock(DateTime.Now.AddHours(-1), stock[1]));
        prices.Add(new UIStock(DateTime.Now.AddHours(-2), stock[2]));
    }

    private void DailyPrices()
    {
        intervalName = "Daily interval";
        StockHistoryContext.SetStockHistoryContext(dayInterval);
        stockHistory = StockHistoryContext.GetStockHistory(Symbol);

        var stock = stockHistory.Prices;

        prices.Clear();
        prices.Add(new UIStock(DateTime.Now, stock[0]));
        prices.Add(new UIStock(DateTime.Now.AddDays(-1), stock[1]));
        prices.Add(new UIStock(DateTime.Now.AddDays(-2), stock[2]));
    }
}
